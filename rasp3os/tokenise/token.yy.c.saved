#line 2 "token.yy.c"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /cvs/rasp3/tokenise/token.yy.c.saved,v 1.5.2.4 2011-02-07 17:43:39 and Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 28
#define YY_END_OF_BUFFER 29
static yyconst short int yy_acclist[306] =
    {   0,
       29,   26,   28,   27,   28,   27,   28,   26,   28,   26,
       28,   26,   28,   26,   28,   26,   28,   26,   28,   26,
       28,   26,   28,16392,   26,   28,16392,   26,   28,16392,
       26,   28,16392,   26,   28,   26,   28,16392,   26,   28,
        6,   26,   28,    6,   26,   28,   26,   28,   24,   26,
       28,    6,   26,   28,   26,   28,   26,   28,   26,   28,
       26,   28,16392,   26,   28,16392,    6,   26,   28,   26,
       28,16392,   26,   28,16392,   26,   28,16392,   26,   28,
    16392,   26,   28,16392,   26,   28,16392,   26,   28,16392,
       26,   28,16392,   26,   28,16392,   26,   28,16392,   26,

       28,16392,   26,   28,16392,   26,   28,16392,   26,   28,
    16392,   26,   28,16392,   26,   28,16392,   28,   28,   28,
       14,   28,   14,   28,   28,   28,   13,   28,   28,   14,
       28,   28,   16,   28,   14,   16,   28,   14,   16,   28,
       16,   28,   16,   28,   13,   16,   28,   16,   28,   14,
       16,   28,   16,   28,   25,   25,   27,   11,   25,   11,
       25,   11,16404,   17,   25,   25,    5,    2,   25,   12,
       25,   12,   25,   12,    6,   17,   12,   25,   12,   25,
        6,    1,    2,   14,   15,    2,   18,   11,   11,   18,
       10, 8212, 8212,   17,   18,   25,   17,    7, 8200,16404,

       22,   22,   12,   12,   18,16405,    6,   17,   18,   12,
       25,   12,   12,   17,   15,   14,   15,   18,   18,   11,
       11,   18,   11,   18, 8212,   17,   18,   17,   18,   19,
       19,   22,   12,   12,   18,   12,   18,16407, 8213, 8213,
        6,   17,   18,   12,   12,   17,   18,   14,   15,   18,
       11,   11,   11,   18, 8212, 8212,   17,   18,   19,   22,
       22,   12,   12,   12,   18, 8215, 8215, 8213,   12,   17,
       18,   11,   10,   10, 8212,   11,   17,   18,   19,   19,
       22,   12,   10,    6,   10, 8215, 8213, 8213,   14,    4,
       11,   17,   18,   19, 8215, 8215, 8213,    3,    4, 8215,

        5,   12,    9,   10,   10
    } ;

static yyconst short int yy_accept[865] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    6,    8,   10,   12,   14,   16,   18,
       20,   22,   25,   28,   31,   34,   36,   39,   41,   44,
       47,   49,   52,   55,   57,   59,   61,   64,   67,   70,
       73,   76,   79,   82,   85,   88,   91,   94,   97,  100,
      103,  106,  109,  112,  115,  118,  119,  120,  121,  123,
      125,  126,  127,  129,  130,  132,  133,  135,  138,  141,
      143,  145,  148,  150,  153,  155,  156,  157,  157,  157,
      158,  160,  162,  162,  162,  162,  162,  162,  162,  162,
      163,  163,  163,  163,  163,  163,  163,  164,  164,  164,

      164,  164,  164,  164,  165,  166,  167,  167,  167,  167,
      167,  167,  168,  168,  168,  168,  168,  168,  168,  168,
      168,  168,  170,  170,  170,  172,  174,  174,  174,  174,
      174,  174,  174,  174,  175,  175,  175,  175,  175,  175,
      175,  175,  175,  175,  175,  175,  177,  179,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,

      182,  182,  184,  184,  184,  185,  186,  186,  187,  188,
      188,  189,  189,  189,  189,  189,  189,  189,  191,  191,
      191,  191,  191,  192,  192,  192,  192,  193,  194,  194,
      194,  194,  194,  194,  194,  194,  194,  194,  196,  196,
      196,  197,  197,  197,  197,  197,  198,  199,  200,  200,
      200,  200,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  201,  201,  202,  203,  203,  203,  203,  203,
      203,  203,  203,  204,  204,  204,  204,  204,  204,  204,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  207,  207,  207,  207,  210,

      212,  213,  214,  214,  214,  214,  214,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  215,  215,  215,  215,  215,
      215,  215,  215,  215,  215,  216,  218,  219,  220,  221,
      221,  221,  221,  221,  221,  223,  225,  225,  225,  225,
      225,  225,  225,  225,  225,  225,  225,  225,  225,  225,
      225,  225,  225,  225,  226,  226,  226,  226,  226,  226,

      228,  228,  228,  228,  228,  228,  230,  230,  230,  231,
      232,  232,  232,  232,  232,  232,  232,  232,  232,  232,
      232,  232,  232,  232,  232,  233,  233,  233,  234,  234,
      234,  234,  234,  234,  236,  238,  238,  238,  238,  238,
      239,  239,  239,  239,  239,  239,  239,  239,  240,  241,
      241,  241,  241,  241,  241,  241,  241,  241,  241,  244,
      245,  245,  245,  245,  245,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  248,  248,  248,  248,  248,
      248,  248,  248,  248,  248,  248,  248,  248,  248,  250,
      251,  252,  253,  253,  253,  253,  253,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  256,  257,  257,  257,
      257,  257,  257,  257,  257,  259,  259,  259,  259,  259,
      259,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      261,  262,  262,  263,  264,  264,  264,  264,  264,  266,
      266,  266,  266,  266,  267,  268,  268,  268,  268,  268,
      268,  268,  268,  268,  268,  268,  268,  268,  268,  268,
      269,  269,  269,  269,  269,  269,  269,  269,  269,  272,

      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  272,  272,  272,
      272,  272,  272,  272,  272,  272,  272,  273,  273,  273,
      273,  273,  273,  274,  275,  275,  275,  275,  275,  275,
      275,  276,  276,  276,  276,  276,  276,  276,  279,  279,
      279,  279,  279,  280,  281,  281,  281,  281,  281,  281,
      281,  281,  282,  282,  283,  283,  283,  283,  283,  284,
      286,  286,  286,  286,  286,  287,  287,  287,  287,  287,

      287,  288,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  289,
      289,  289,  290,  290,  290,  290,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  294,  294,  294,
      294,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  296,  297,  297,  297,  297,  297,  298,
      298,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      298,  298,  300,  300,  300,  300,  300,  300,  300,  300,
      300,  300,  300,  300,  300,  300,  300,  300,  300,  300,

      300,  300,  301,  301,  301,  301,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  303,  303,  303,
      303,  303,  303,  303,  303,  303,  303,  305,  305,  305,
      305,  305,  305,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    6,    7,    8,    9,   10,   11,   12,   13,   14,
       15,   16,    1,   17,   18,   19,   20,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   17,   22,   23,
        1,    1,    7,    1,   24,   24,   25,   26,   27,   28,
       29,   30,   29,   29,   29,   31,   32,   33,   34,   29,
       29,   35,   36,   37,   29,   38,   29,   39,   29,   29,
       14,    1,   15,   40,    1,   41,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   29,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   29,   14,   66,   15,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[67] =
    {   0,
        1,    2,    2,    2,    2,    2,    1,    1,    2,    1,
        1,    1,    1,    1,    3,    1,    1,    2,    2,    1,
        4,    1,    1,    4,    4,    4,    4,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    4,    4,    4,    4,    4,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static yyconst short int yy_base[870] =
    {   0,
        0,    0,   66,    0,  123,  124,  158,    0,  218,  278,
     1580,  133, 1581, 1576,  343,    0,  138,  408,  441,  181,
      502,  187,  541,  133,  137,  241,  141,  594,    0,  246,
      659,  716,  264,    0,  301,  781, 1514,  146,  311, 1559,
     1515,  106,  161, 1511,  110,  126,  162,  159,  168,  184,
     1522, 1512,  846,  266,  283, 1581, 1562, 1565, 1581, 1581,
     1560,  137, 1556, 1550, 1548, 1560, 1581, 1581, 1581, 1555,
      154, 1551, 1545, 1543, 1555, 1581, 1557, 1541, 1539, 1581,
     1581, 1554,  365,    0, 1546,  215,    0, 1537, 1535, 1581,
     1526,  158,  370, 1496, 1490, 1508,  908, 1518, 1521, 1520,

     1494, 1499, 1498, 1525,  391,  418,  973, 1532,  219,    0,
     1522, 1581, 1525, 1497,  988,  203,  208, 1496, 1500, 1494,
     1049, 1581, 1493, 1474, 1581, 1530,  400,    0, 1522,  221,
        0, 1513, 1511, 1581, 1473, 1467, 1485,  186, 1471, 1479,
      192,  207, 1469,  289,  224, 1505,  430,  441,  450, 1512,
      252,    0, 1502, 1460, 1465, 1463, 1581,  253, 1458, 1470,
      121, 1462,  270,  292, 1458, 1465, 1457, 1451, 1460, 1455,
     1450, 1455,  279,  268, 1440, 1425, 1422, 1419, 1420, 1433,
      285, 1433, 1418, 1408, 1426, 1416, 1416,  335, 1415, 1412,
     1420, 1415,  285, 1412, 1408, 1419,  326, 1408, 1399, 1412,

     1426, 1581, 1391, 1409, 1581, 1430, 1428, 1581, 1426, 1424,
     1439, 1423, 1419, 1410, 1380, 1374, 1392, 1415, 1412, 1396,
      360,    0, 1581, 1374, 1373, 1368, 1581, 1423,  426,    0,
     1414,  358, 1090, 1403, 1401,  374,  378, 1399,  485,  524,
      546, 1389, 1359, 1353, 1369, 1391, 1581, 1394, 1352, 1151,
     1376, 1379, 1378, 1352, 1357, 1356, 1359, 1363, 1357, 1338,
     1341,    0, 1340, 1581, 1392, 1216,    0, 1384,  341, 1375,
     1373, 1335, 1387, 1371, 1369, 1360, 1330, 1324, 1342, 1365,
     1363, 1326, 1325, 1320, 1326, 1318, 1321, 1333, 1322,  379,
     1321, 1313, 1316, 1328, 1281, 1325, 1310,  391, 1342,  563,

      575,  616, 1332, 1299, 1285, 1303, 1325, 1297, 1282, 1283,
     1294, 1290, 1294, 1287, 1282,  395, 1283, 1288, 1270, 1285,
     1313, 1272, 1280, 1272, 1267, 1272,  450, 1267, 1279, 1271,
     1259, 1270, 1260, 1269, 1268, 1268, 1274, 1272, 1260, 1257,
     1257, 1261, 1260,  484, 1261, 1256, 1255, 1260, 1247, 1260,
     1243, 1245, 1243, 1238, 1221, 1218, 1228, 1218, 1223, 1225,
     1219, 1240, 1218, 1213, 1253, 1251, 1251, 1249, 1249, 1247,
     1231, 1209, 1208, 1203, 1243, 1241, 1231, 1236, 1198, 1196,
     1199,  391, 1227, 1197, 1191, 1209,    0, 1219, 1222, 1221,
     1195, 1200, 1199, 1226, 1224, 1200, 1204, 1198, 1177, 1214,

      626, 1196, 1170, 1161, 1156, 1195, 1198, 1157, 1581, 1208,
      528,    0, 1200,  474, 1191, 1189, 1151,    0, 1150, 1149,
     1148, 1175, 1140, 1158, 1181, 1179, 1142, 1178, 1176, 1160,
     1138, 1137, 1132, 1172, 1170, 1129, 1127, 1130, 1133, 1346,
     1138, 1122, 1135, 1116, 1127, 1133, 1121, 1581, 1173,    0,
        0, 1165,  403, 1154, 1148, 1105, 1114, 1087, 1132,  635,
     1113, 1091, 1090, 1085, 1122, 1082, 1079, 1096, 1074, 1085,
     1080, 1073, 1078, 1081, 1070, 1081, 1081, 1064, 1067, 1070,
     1073, 1068, 1067, 1064, 1063, 1062, 1060, 1055, 1052, 1055,
     1045, 1053, 1050, 1044, 1039, 1043, 1042, 1035, 1043, 1040,

     1041, 1030, 1029, 1036, 1038, 1029, 1032, 1029, 1028, 1031,
     1026, 1024, 1023, 1020, 1009, 1035,  998,  993, 1029, 1026,
     1026, 1024, 1014,  980,  978,  981, 1017, 1025, 1012, 1010,
      398,  997,  975,  974,  969, 1009, 1006,  966,    0,  965,
      990,  958,  956,  959,  993,  952,  417,  983,  948,  966,
      989,  987,  950,  949,  944,  943,  967,  945,  940,  980,
      978,  937,  977,  975,  965,  933,  931,  934,  970,  965,
      962,  439,  309, 1581,  979,    0,    0,  970,  427,  955,
      953,  922,  916,  909,  463,  913,  940,  905,  923,  946,
      944,  912,  906,  899,  930,  898,  896,  899,  935,  900,

      902,  906,  901,  899,  898,  902,  892,  895,  883,  884,
      892,  890,  885,  880,  883,  882,  881,  880,  879,  878,
      875,  874,  868,  863,  849,  857,  855,  850,  854,  844,
      848,  844,  843,  841,  836,  835,  833,  834,  831,  830,
      829,  828,  831,  870,  856,  818,  857,  865,  852,  851,
      813,  861, 1387,    0,  820,  812,  840,  808,  806,  807,
      843,   92,  112,  217,  212,  232,  216,  273,  277,  293,
      285,  284,  412,  445,  412,  419,  460,  470,  474,  449,
      455,  500,  500,  504,  514,  511,  513,  477, 1424,    0,
      480,  511,  496,  516,  544,  544,  511,  537,  517,  516,

      558,  564,  574,  565,  566,  530,  540,  537,  542,  551,
      540,  554,  560,  569,  572,  566,  573,  579,  584,  581,
      620,  589,  590,  591,  597,  594,  595,  596,  599,  598,
      643, 1581,  597,  645,  600, 1581,  600,  598,  657,  647,
      648,  612,  613,  614,  664,  619,  660,  652,  621,  626,
      664,  662,  663,  676,  665,  629,  679,  633,  630,  658,
      638,  635,  677,  677,  675,  670,  639,  644,  683,  693,
      647,  651,  652,  663,  654,  665,  660,  657,  660,  659,
      664, 1581,  654,  664,  686,  677,  727,  683,  721,  722,
      684,  740,  733,  697,  747,  701,  698,  707,  735,  704,

      710,  748,  761,  750,  714, 1581,  716,  737,  729,  732,
      736,  750,  743,  747,  750,  784,  785,  747,  754,  800,
      754,  751,  758,  792,  805,  794,  758,  808,  762,  765,
      762,  773,  774,  779,  804,  805, 1581,  773,  807,  769,
      776,  810,    0,  823,  777,  774,  814,  787,  784,  785,
      782,  819,  787,  821,  783,  790,  792,  794,  832,  800,
      834,  835, 1581, 1486, 1491, 1495, 1498,  857, 1501
    } ;

static yyconst short int yy_def[870] =
    {   0,
      863,    1,  863,    3,  864,  864,  864,    7,  865,  865,
      863,  863,  863,  863,  863,   15,  863,  866,   15,  863,
      863,  863,  863,   23,   23,  863,   23,  863,   28,  863,
      866,  863,  863,   28,  863,  863,   23,   23,  863,   23,
       23,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,  863,   23,   23,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,   15,   83,  863,  863,   83,  863,   83,  863,
      863,  863,  866,   93,   93,   93,  863,  863,  863,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  863,  107,
      863,  863,  867,  863,  863,  863,  863,  863,  115,  863,
      863,  863,  863,  115,  863,  863,   28,  127,  863,  863,
      127,  863,  127,  863,   93,   93,   93,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,   36,  863,
      863,  149,  127,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  121,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,   83,  863,  863,  863,  863,  863,   83,  863,
      863,  868,  863,   93,   93,   93,  863,  863,   97,  229,
      863,  863,  863,  863,  229,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,   83,  863,  869,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,   97,  863,  863,  863,  863,  266,  863,  863,  863,
      266,  863,  863,  863,  127,  863,  863,  863,  863,  863,
      127,   93,   93,   93,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  863,  863,  127,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,   83,
      863,  863,  863,  863,  863,   83,  863,  868,   93,   93,
       93,  863,  863,  863,  863,  863,   97,  863,  863,  863,
      863,  863,  863,  863,  229,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  863,   83,  869,  863,  863,  863,
      250,  411,  863,  863,  863,  411,  863,  250,  863,  863,
      863,  863,  863,  863,  863,  266,  863,  863,  127,  863,
      863,  863,  863,  863,  127,   93,   93,   93,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  295,
      295,  863,  863,  863,  295,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  127,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,   83,  863,  863,  863,  863,   83,  863,   93,   93,
       93,  863,  863,  863,  863,  863,  229,  863,   97,  863,
      863,  863,  863,  863,   83,  863,  863,  863,  863,  863,
      863,  411,  863,  863,  863,  863,  863,  863,  863,  863,
      266,  863,  863,  127,  863,  863,  863,  863,  127,   93,
       93,   93,  863,  863,  863,  440,  440,  863,  863,  863,
      440,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      295,  863,  863,  863,  863,  863,  863,  863,  127,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,   83,  863,  863,  863,
      863,  863,   83,   83,   93,   93,  863,  863,  863,  863,
      229,  863,  863,  863,  863,  863,  863,   83,  863,  863,
      863,  863,  863,  411,  863,  863,  863,  863,  863,  863,
      863,  266,  863,  127,  863,  863,  863,  863,  127,  127,
       93,  863,  863,  863,  863,  440,  863,  863,  863,  863,

      863,  295,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,   93,   93,  863,  863,
      863,  863,  863,  863,  863,  863,   83,  863,  863,  863,
      411,  863,  863,  863,  863,  863,  863,  863,   93,  863,
      863,  863,  863,  440,  863,  863,  863,  863,  295,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,   93,   93,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,   93,  863,  863,

      863,  440,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,   93,   93,  863,  863,  863,
      863,  863,  863,   93,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  127,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,    0,  863,  863,  863,  863,  863,  863
    } ;

static yyconst short int yy_nxt[1648] =
    {   0,
       12,   13,   13,   13,   14,   13,   15,   16,   12,   17,
       15,   18,   19,   12,   16,   12,   15,   20,   21,   15,
       22,   15,   12,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   24,   23,   23,   25,   23,   23,   25,   26,
       12,   23,   23,   23,   23,   23,   23,   23,   23,   23,
       23,   23,   23,   27,   23,   23,   23,   23,   25,   23,
       23,   23,   23,   25,   23,   15,   12,   13,   13,   13,
       14,   13,   28,   29,   12,   30,   28,   31,   32,   33,
       34,   33,   28,   35,   36,   28,   22,   28,   12,   23,
       23,   23,   37,   23,   23,   23,   23,   23,   24,   23,

       23,   38,   23,   23,   25,   26,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   23,   48,   49,   23,   50,
       23,   51,   23,   52,   53,   54,   23,   23,   55,   25,
       23,   28,   57,   57,   76,   76,   76,   77,   76,   76,
       76,   76,   77,   76,  118,  119,  743,   91,  120,  121,
       78,   79,  123,  124,  160,   78,   79,  120,  121,  166,
      161,  167,   58,   58,   59,   60,  744,   61,   59,   62,
       63,  168,   60,  314,   59,   64,   65,   59,  221,   59,
      169,  315,   76,   76,   76,   77,   76,  155,   76,   76,
       76,   77,   76,  203,  204,  123,  124,   66,  104,   79,

      113,  156,  162,  170,   78,   79,  163,  171,  173,  175,
      203,  204,  174,  176,  257,  258,  172,  177,  164,  259,
      260,  222,  178,   59,   68,   69,  745,   70,   68,   71,
       72,  285,   69,  110,   68,   73,   74,   68,  179,   68,
      286,  289,   76,   76,   76,   77,  122,   76,   76,   76,
       77,   76,  291,  107,  290,   91,  215,   75,   78,   79,
      243,  292,  277,   78,   79,   76,   76,   76,   77,   76,
      209,  216,  217,  297,  746,  244,  245,  278,  279,  259,
      260,   78,   79,   68,   68,   69,  298,   70,   68,   71,
       72,  747,   69,  304,   68,   73,   74,   68,  115,   68,

      294,  295,   76,   76,   76,   77,   76,  193,  305,  306,
      311,  194,   76,   76,   76,   77,   76,   75,  146,   79,
      195,  317,  331,  196,  197,  318,  748,  338,   78,   79,
      330,  198,  316,  319,  296,  352,  353,  199,  339,  749,
      200,  320,  750,   68,   81,   81,   81,   82,   81,   83,
       84,  157,   85,   83,   86,   87,  321,   84,  440,   83,
       88,   89,   83,  440,   83,   90,   90,   90,   90,  211,
       90,  863,  863,  863,  863,  863,  346,  357,  863,  358,
      221,  223,  212,  213,  347,  396,  397,  863,  863,  398,
      399,  223,  239,  239,  239,  240,  239,  423,  424,  384,

      108,  134,  134,  134,  273,  134,  294,  295,   83,   76,
       76,   76,   77,   76,  385,  386,   92,  274,  275,  239,
      241,  239,  240,  239,  443,   78,   79,  108,  444,  673,
      112,  239,  239,  239,  240,  239,  457,  382,  863,  108,
      458,  655,  239,  300,  239,  240,  239,  385,  386,   94,
      108,  301,  301,  301,  302,  301,  656,  112,  863,  588,
      589,  294,  295,  751,   95,   96,   97,  274,  275,  112,
      752,   98,   97,  549,  550,   99,   97,  753,  100,  863,
      112,  119,  655,  693,  694,   97,  239,  239,  239,  240,
      239,  121,  101,   97,  108,  294,  295,  691,  102,   97,

      481,  754,  103,  105,  105,  105,  106,  105,  755,  107,
      756,  108,  440,  109,  110,  249,  107,  440,  682,   78,
      111,  124,  684,  757,  112,  239,  401,  239,  240,  239,
      549,  550,  131,  108,  128,  758,  759,  760,  498,  547,
      863,  112,   76,   76,   76,   77,   76,  239,  239,  239,
      240,  239,  114,  115,  113,  108,  761,  762,   78,   79,
      863,  763,  764,  112,  239,  239,  239,  240,  239,  765,
      766,  767,  108,  116,  768,  701,  239,  239,  239,  240,
      239,  863,  769,  770,  108,  112,  152,  149,  771,  772,
      316,  773,  774,  316,  117,  125,  125,  125,  126,  125,

      127,  128,  112,  129,  127,  130,  131,  316,  128,  775,
      127,  132,  133,  127,  112,  127,  134,  239,  460,  239,
      240,  239,  316,  776,  777,  108,  316,  239,  239,  239,
      240,  239,  316,  778,  316,  108,  239,  239,  239,  240,
      239,  183,  316,  316,  108,  779,  780,  316,  316,  316,
      781,  316,  782,  783,   90,  112,  784,  785,  786,  127,
       76,   76,   76,   77,   76,  112,  787,   92,  233,  230,
      788,  789,  790,  112,  112,  791,   78,   79,  747,  792,
      793,  794,  751,  258,  260,  795,  267,  796,  134,  797,
      798,  799,  800,  801,  763,  802,  295,  803,  804,  805,

      135,  769,  806,  807,  808,  316,  809,  316,  810,  811,
      316,  812,  316,  813,  814,  136,  137,  125,  125,  125,
      126,  125,  127,  128,  815,  129,  127,  130,  131,  816,
      128,  817,  127,  132,  133,  127,  227,  127,  134,  818,
      138,   97,  397,  399,  819,  139,   98,   97,  140,  820,
       99,   97,  141,  100,  412,  821,  264,  822,  823,  142,
       97,  824,  825,  826,  143,  827,  802,  101,   97,  144,
      828,  451,  829,  102,   97,  145,  830,  103,  831,  832,
      833,  127,  147,  147,  147,  148,  147,  127,  149,  316,
      150,  127,  151,  152,  834,  149,  316,  127,  132,  153,

      127,  835,  127,  134,  836,  837,  654,  838,  839,  409,
      840,  841,  842,  843,  844,  577,  845,  448,  846,  847,
      112,  848,  849,  850,  851,  732,   84,  852,  107,  853,
      854,  128,  574,  855,  856,  149,  857,  316,  316,  858,
      230,  859,  267,  860,  861,  316,  127,   76,   76,   76,
       77,   76,  316,  412,  862,  451,  577,  182,  183,  113,
      378,  661,  742,   78,   79,  741,  740,  739,  738,  737,
      736,  735,   84,   87,  734,  647,  733,  732,  116,  731,
      730,  316,  316,  316,  316,  729,  316,  184,  316,  316,
      728,  185,  727,  726,  186,  187,  725,  316,  188,  117,

      189,  190,  724,  316,  723,  191,  722,  721,  192,  227,
      227,  227,  228,  227,  229,  230,  316,  231,  229,  232,
      233,  316,  230,  720,  229,  234,  235,  229,  316,  229,
      227,  316,  316,  316,  316,  316,  316,  719,  316,  718,
      236,  717,  716,  715,  714,  316,  713,  712,  711,  710,
      709,  708,  707,  599,  706,  705,  704,  703,  440,  440,
      440,  237,  702,  701,  700,  699,  698,  697,  440,  440,
      440,  696,  695,  229,  239,  239,  239,  240,  239,  692,
      107,  574,  108,  690,  109,  110,  689,  107,  569,  688,
      687,  686,  685,  684,  563,  683,  682,  560,  681,  680,

      679,  678,  677,  676,  675,  674,  673,  672,  671,  670,
      669,  668,  112,  250,  667,  666,  665,  664,  251,  250,
      663,  662,  252,  250,  661,  253,  536,  660,  659,  658,
      657,  654,  250,  653,  652,  527,  651,  650,  649,  254,
      250,  648,  647,  521,  520,  255,  250,  519,  646,  256,
      264,  264,  264,  265,  264,  266,  267,  645,  268,  266,
      269,  266,  644,  267,  643,  266,  270,  271,  266,  642,
      266,  264,  641,  640,  250,  639,  638,  637,  636,  251,
      250,  635,  316,  252,  250,  634,  253,  633,  632,  631,
      630,  629,  628,  250,  627,  316,  316,  626,  625,  624,

      254,  250,  623,  622,  621,  316,  255,  250,  316,  620,
      256,  619,  618,  617,  266,  387,  616,  615,  614,  613,
      388,  387,  612,  611,  389,  387,  610,  390,  609,  608,
      607,  606,  605,  316,  387,  604,  603,  602,  601,  600,
      599,  391,  387,  598,  597,  596,  595,  392,  387,  459,
      594,  393,  409,  409,  409,  410,  409,  411,  412,  593,
      413,  411,  414,  115,  592,  412,  591,  411,  415,  416,
      411,  590,  411,  409,  587,  448,  586,  440,  585,  584,
      583,  582,  440,  116,  573,  572,  571,  570,  569,  434,
      568,  567,  566,  565,  564,  563,  562,  561,  560,  559,

      558,  557,  556,  555,  117,  554,  553,  552,  551,  548,
      409,  546,  247,  545,  544,  543,  411,  264,  264,  264,
      265,  264,  266,  267,  542,  268,  266,  269,  266,  541,
      267,  400,  266,  270,  271,  266,  539,  266,  264,  540,
      539,  538,  537,  536,  387,  387,  387,  387,  387,  387,
      535,  534,  533,  532,  531,  530,  529,  223,  528,  527,
      375,  526,  525,  524,  523,  522,  521,  520,  367,  519,
      365,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  266,  448,  448,  448,  449,  448,  450,  451,  508,
      452,  450,  453,  507,  506,  451,  505,  450,  454,  455,

      450,  504,  450,  448,  503,  502,  501,  500,  499,  497,
      496,  495,  494,  493,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  316,  480,  479,  478,  477,
      476,  475,  474,  473,  316,  472,  471,  470,  469,  468,
      467,  316,  466,  465,  464,  463,  450,  574,  574,  574,
      575,  574,  576,  577,  462,  578,  576,  579,  461,  459,
      577,  440,  576,  580,  581,  576,  456,  576,  574,  447,
      446,  440,  445,  440,  442,  441,  440,  439,  438,  437,
      436,  435,  434,  433,  432,  431,  430,  429,  428,  134,
      427,  426,  425,  422,  264,  421,  420,  418,  419,  418,

      417,  250,  250,  250,  250,  250,  250,  408,  247,  406,
      405,  576,   97,  404,  403,  402,  400,   98,   97,  395,
      394,   99,   97,  383,  100,  227,  381,  380,  379,  377,
      376,   97,  375,  374,  373,  372,  371,  370,  101,   97,
      369,   90,  368,  367,  102,   97,  366,  365,  103,   97,
      364,  363,  362,  361,   98,   97,  360,  359,   99,   97,
      356,  100,  355,  354,  351,  350,  349,  348,   97,  345,
      344,  343,  342,  341,  340,  101,   97,  316,  337,  336,
      335,  102,   97,  334,  333,  103,   56,   56,   56,   56,
       56,   67,   67,   67,   67,   67,   93,  332,   93,   93,

      248,  248,  248,  407,  407,  407,  329,  328,  327,  326,
      325,  324,  323,  322,  316,  313,  312,  310,  309,  308,
      307,  303,  299,  293,  288,  287,  284,  283,  282,  281,
      280,  276,  125,  262,  272,  263,  262,  261,  249,  247,
      246,  242,  238,   97,   97,   97,   97,   97,   97,  226,
      225,  224,  220,  219,  218,  214,   81,  210,  209,   76,
      208,  207,  206,  205,   91,  208,  207,  206,  205,   91,
      202,  201,  181,  180,  165,  159,  158,  154,   80,  863,
       11,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863
    } ;

static yyconst short int yy_chk[1648] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    6,   12,   12,   12,   12,   12,   17,
       17,   17,   17,   17,   24,   24,  662,   17,   25,   25,
       12,   12,   27,   27,   42,   17,   17,   38,   38,   45,
       42,   45,    5,    6,    7,    7,  663,    7,    7,    7,
        7,   46,    7,  161,    7,    7,    7,    7,   92,    7,
       46,  161,   20,   20,   20,   20,   20,   38,   22,   22,
       22,   22,   22,   62,   62,   50,   50,    7,   20,   20,

       22,   38,   43,   47,   22,   22,   43,   47,   48,   49,
       71,   71,   48,   49,  116,  116,   47,   49,   43,  117,
      117,   92,   49,    7,    9,    9,  664,    9,    9,    9,
        9,  138,    9,  665,    9,    9,    9,    9,   50,    9,
      138,  141,   26,   26,   26,   26,   26,   30,   30,   30,
       30,   30,  142,  666,  141,   30,   86,    9,   26,   26,
      109,  142,  130,   30,   30,   33,   33,   33,   33,   33,
      158,   86,   86,  145,  667,  109,  109,  130,  130,  174,
      174,   33,   33,    9,   10,   10,  145,   10,   10,   10,
       10,  668,   10,  151,   10,   10,   10,   10,  669,   10,

      144,  144,   35,   35,   35,   35,   35,   54,  151,  151,
      158,   54,   39,   39,   39,   39,   39,   10,   35,   35,
       54,  163,  174,   54,   55,  163,  670,  181,   39,   39,
      173,   55,  173,  164,  144,  193,  193,   55,  181,  671,
       55,  164,  672,   10,   15,   15,   15,   15,   15,   15,
       15,   39,   15,   15,   15,   15,  164,   15,  573,   15,
       15,   15,   15,  573,   15,   15,   83,   83,   83,   83,
       83,   93,   93,   93,   93,   93,  188,  197,   93,  197,
      221,  221,   83,   83,  188,  236,  236,   93,   93,  237,
      237,   93,  105,  105,  105,  105,  105,  269,  269,  232,

      105,  127,  127,  127,  127,  127,  316,  316,   15,   18,
       18,   18,   18,   18,  232,  232,   18,  127,  127,  106,
      106,  106,  106,  106,  290,   18,   18,  106,  290,  673,
      105,  147,  147,  147,  147,  147,  298,  229,  229,  147,
      298,  531,  148,  148,  148,  148,  148,  382,  382,   18,
      148,  149,  149,  149,  149,  149,  531,  106,  229,  453,
      453,  327,  327,  674,   18,   18,   19,  149,  149,  147,
      675,   19,   19,  547,  547,   19,   19,  676,   19,  229,
      148,  677,  572,  579,  579,   19,  239,  239,  239,  239,
      239,  678,   19,   19,  239,  344,  344,  572,   19,   19,

      327,  679,   19,   21,   21,   21,   21,   21,  680,   21,
      681,   21,  585,   21,   21,  414,   21,  585,  682,   21,
       21,  683,  684,  685,  239,  240,  240,  240,  240,  240,
      414,  414,  686,  240,  687,  688,  691,  692,  344,  411,
      411,   21,   23,   23,   23,   23,   23,  241,  241,  241,
      241,  241,   23,   23,   23,  241,  693,  694,   23,   23,
      411,  695,  696,  240,  300,  300,  300,  300,  300,  697,
      698,  699,  300,   23,  700,  701,  301,  301,  301,  301,
      301,  411,  702,  703,  301,  241,  704,  705,  706,  707,
      708,  709,  710,  711,   23,   28,   28,   28,   28,   28,

       28,   28,  300,   28,   28,   28,   28,  712,   28,  713,
       28,   28,   28,   28,  301,   28,   28,  302,  302,  302,
      302,  302,  714,  715,  716,  302,  717,  401,  401,  401,
      401,  401,  718,  719,  720,  401,  460,  460,  460,  460,
      460,  721,  722,  723,  460,  724,  725,  726,  727,  728,
      729,  730,  731,  733,  734,  302,  735,  737,  738,   28,
       31,   31,   31,   31,   31,  401,  739,   31,  740,  741,
      742,  743,  744,  745,  460,  746,   31,   31,  747,  748,
      749,  750,  751,  752,  753,  754,  755,  756,  757,  758,
      759,  760,  761,  762,  763,  764,  765,  766,  767,  768,

       31,  769,  770,  771,  772,  773,  774,  775,  776,  777,
      778,  779,  780,  781,  783,   31,   31,   32,   32,   32,
       32,   32,   32,   32,  784,   32,   32,   32,   32,  785,
       32,  786,   32,   32,   32,   32,  787,   32,   32,  788,
       32,   32,  789,  790,  791,   32,   32,   32,   32,  792,
       32,   32,   32,   32,  793,  794,  795,  796,  797,   32,
       32,  798,  799,  800,   32,  801,  802,   32,   32,   32,
      803,  804,  805,   32,   32,   32,  807,   32,  808,  809,
      810,   32,   36,   36,   36,   36,   36,   36,   36,  811,
       36,   36,   36,   36,  812,   36,  813,   36,   36,   36,

       36,  814,   36,   36,  815,  816,  817,  818,  819,  820,
      821,  822,  823,  824,  825,  826,  827,  828,  829,  830,
       36,  831,  832,  833,  834,  835,  836,  838,  839,  840,
      841,  842,  844,  845,  846,  847,  848,  849,  850,  851,
      852,  853,  854,  855,  856,  857,   36,   53,   53,   53,
       53,   53,  858,  859,  860,  861,  862,   53,   53,   53,
      868,  661,  660,   53,   53,  659,  658,  657,  656,  655,
      652,  651,  650,  649,  648,  647,  646,  645,   53,  644,
      643,  642,  641,  640,  639,  638,  637,   53,  636,  635,
      634,   53,  633,  632,   53,   53,  631,  630,   53,   53,

       53,   53,  629,  628,  627,   53,  626,  625,   53,   97,
       97,   97,   97,   97,   97,   97,  624,   97,   97,   97,
       97,  623,   97,  622,   97,   97,   97,   97,  621,   97,
       97,  620,  619,  618,  617,  616,  615,  614,  613,  612,
       97,  611,  610,  609,  608,  607,  606,  605,  604,  603,
      602,  601,  600,  599,  598,  597,  596,  595,  594,  593,
      592,   97,  591,  590,  589,  588,  587,  586,  584,  583,
      582,  581,  580,   97,  107,  107,  107,  107,  107,  578,
      107,  575,  107,  571,  107,  107,  570,  107,  569,  568,
      567,  566,  565,  564,  563,  562,  561,  560,  559,  558,

      557,  556,  555,  554,  553,  552,  551,  550,  549,  548,
      546,  545,  107,  115,  544,  543,  542,  541,  115,  115,
      540,  538,  115,  115,  537,  115,  536,  535,  534,  533,
      532,  530,  115,  529,  528,  527,  526,  525,  524,  115,
      115,  523,  522,  521,  520,  115,  115,  519,  518,  115,
      121,  121,  121,  121,  121,  121,  121,  517,  121,  121,
      121,  121,  516,  121,  515,  121,  121,  121,  121,  514,
      121,  121,  513,  512,  121,  511,  510,  509,  508,  121,
      121,  507,  506,  121,  121,  505,  121,  504,  503,  502,
      501,  500,  499,  121,  498,  497,  496,  495,  494,  493,

      121,  121,  492,  491,  490,  489,  121,  121,  488,  487,
      121,  486,  485,  484,  121,  233,  483,  482,  481,  480,
      233,  233,  479,  478,  233,  233,  477,  233,  476,  475,
      474,  473,  472,  471,  233,  470,  469,  468,  467,  466,
      465,  233,  233,  464,  463,  462,  461,  233,  233,  459,
      458,  233,  250,  250,  250,  250,  250,  250,  250,  457,
      250,  250,  250,  250,  456,  250,  455,  250,  250,  250,
      250,  454,  250,  250,  452,  449,  447,  446,  445,  444,
      443,  442,  441,  250,  439,  438,  437,  436,  435,  434,
      433,  432,  431,  430,  429,  428,  427,  426,  425,  424,

      423,  422,  421,  420,  250,  419,  417,  416,  415,  413,
      410,  408,  407,  406,  405,  404,  250,  266,  266,  266,
      266,  266,  266,  266,  403,  266,  266,  266,  266,  402,
      266,  400,  266,  266,  266,  266,  399,  266,  266,  398,
      397,  396,  395,  394,  393,  392,  391,  390,  389,  388,
      386,  385,  384,  383,  381,  380,  379,  378,  377,  376,
      375,  374,  373,  372,  371,  370,  369,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  358,  357,  356,
      355,  266,  295,  295,  295,  295,  295,  295,  295,  354,
      295,  295,  295,  353,  352,  295,  351,  295,  295,  295,

      295,  350,  295,  295,  349,  348,  347,  346,  345,  343,
      342,  341,  340,  339,  338,  337,  336,  335,  334,  333,
      332,  331,  330,  329,  328,  326,  325,  324,  323,  322,
      321,  320,  319,  318,  317,  315,  314,  313,  312,  311,
      310,  309,  308,  307,  306,  305,  295,  440,  440,  440,
      440,  440,  440,  440,  304,  440,  440,  440,  303,  299,
      440,  297,  440,  440,  440,  440,  296,  440,  440,  294,
      293,  292,  291,  289,  288,  287,  286,  285,  284,  283,
      282,  281,  280,  279,  278,  277,  276,  275,  274,  273,
      272,  271,  270,  268,  265,  263,  261,  260,  259,  258,

      257,  256,  255,  254,  253,  252,  251,  249,  248,  246,
      245,  440,  653,  244,  243,  242,  238,  653,  653,  235,
      234,  653,  653,  231,  653,  228,  226,  225,  224,  220,
      219,  653,  218,  217,  216,  215,  214,  213,  653,  653,
      212,  211,  210,  209,  653,  653,  207,  206,  653,  689,
      204,  203,  201,  200,  689,  689,  199,  198,  689,  689,
      196,  689,  195,  194,  192,  191,  190,  189,  689,  187,
      186,  185,  184,  183,  182,  689,  689,  689,  180,  179,
      178,  689,  689,  177,  176,  689,  864,  864,  864,  864,
      864,  865,  865,  865,  865,  865,  866,  175,  866,  866,

      867,  867,  867,  869,  869,  869,  172,  171,  170,  169,
      168,  167,  166,  165,  162,  160,  159,  156,  155,  154,
      153,  150,  146,  143,  140,  139,  137,  136,  135,  133,
      132,  129,  126,  124,  123,  120,  119,  118,  114,  113,
      111,  108,  104,  103,  102,  101,  100,   99,   98,   96,
       95,   94,   91,   89,   88,   85,   82,   79,   78,   77,
       75,   74,   73,   72,   70,   66,   65,   64,   63,   61,
       58,   57,   52,   51,   44,   41,   40,   37,   14,   11,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,

      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863,  863,  863,  863,
      863,  863,  863,  863,  863,  863,  863
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
yy_lp = yy_full_lp; /* restore orig. accepting pos. */ \
yy_state_ptr = yy_full_state; /* restore orig. state */ \
yy_current_state = *yy_state_ptr; /* restore curr. state */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../enc/charclasses.flex"
#define INITIAL 0
/* LETTERS */
/* DIGITS */
/* UPPERCASE LETTERS */
/*  WHITESPACE */
/* New line/paragraph: \n \r \f \v \r\n */
/* Space/blank characters: space tab */
/* NON-WHITESPACE */
/* This class covers everything not included in {sp}, including control characters and 8-bit bytes */
/* Matches 1,114,088 UTF-8 characters, as well as '\0' (if not used as <EOF>):  */
/* PUNCTUATION */
/* Opening quotation marks:
    " ` `` */
/* Closing quotation marks:
    apostrophe " '' */
/* Note: '' needs special treatment due to a limitation in flex. */
/* Opening brackets */
/* Closing brackets */
/* Hyphens:
    - */
/* Dashes (excluding hyphens):
    -- and --- */
/* Ellipses:
    ... and .... */
/* Currency symbols */
/* Sentence-final punctuation EXCLUDING full stop to avoid problems with abbreviations */
/* Punctuation at the beginning of a sentence/token */
/* Punctuation at the end of a sentence */
/* Punctuation at the end of a token */
#line 2 "token.flex"
/* Flex tokeniser for English text in plain ASCII (7-bit) or UTF-8 encodings.
   Sentence boundaries are assumed to have been marked already, by '^ '.
 
   (c) John Carroll, University of Sussex, 2001-3

   Example compilation/test command lines:
     $ flex ../enc/charclasses.flex token.flex
                                  - compiling the flex code
     $ gcc lex.yy.c -o token      - compiling the C code
     $ rm lex.yy.c                - deleting the intermediate file
     $ ./token < token.test       - testing the executable file

   Flushes the output stream after every token so should work fine when
   used interactively via unix pipes.

*/

  /* On eof explicitly insert a distinguished token into the input stream so that
     a '.' ending the last sentence can be detected
  */
#include <string.h>
#define YY_INPUT(buf, result, max_size) \
              { \
              int c = getchar(); \
              result = (c == EOF) ? (strcpy(buf, "$$EOF$$"), 7) : (buf[0] = c, 1); \
              }

#define maxbuf 1000 
static char buf[maxbuf];

int printedspace = 1;

int apostrophe = 0;

/*#define YY_USER_ACTION  printf("<%i>", YY_START);*/

/*  grep "' " ../tag/auxiliary_files/seclarge.lex | cut -f1,1 -d" " | sed "s/'\$//"| tr '\n' '|' */
/*contract2 ({apostrophe}n|An|D|Exterminatin|L|Sant|Sportin|a-readin|an|bushwhackin|checkin|comin|countin|d|dam|dell|dependin|drawin|driftin|dry-gulchin|expressin|fightin|floppin|gettin|goin|han|hankerin|herrin|holdin|killin|kin|knowin|larkin|lettin|livin|lovin|m|nothin|o|pleasin|rubbin|runnin|s{apostrophe}posin|sayin|seein|sho|shootin|singin|smallholders|smilin|somethin|sportin|stealin|swingin|t|takin|talkin|tellin|tootin|travellin|walkin|wantin|whinin|workin|wrappin|y){apostrophe}*/
/* {alpha}{1,2}'  removed from contract2 to avoid problems with dangerous trailing context.  Should be fixed properly somehow. */
/* contract3 for non-curly ASCII apostrophe only, since no ambiguity occurs when curly single quotes or old-style ASCII `...' is used. */
/* CALD also gives 'knock */
/* 'phone, 'bus, 'plane, 'blog and others could be added, but this would not necessarily give better tokenisation for contemporary English */
/* Archaic contractions 'tis, 'twas, 'twill &c. cannot simply be added to this list, as they need to be split, and 't handled as a pronoun later on */
#define new_token 1

#define out 2
#define trail 3
#define trail_new_token 4

#line 1144 "token.yy.c"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 65 "token.flex"


  /* Go in/out of or terminate tokenisation */

#line 1300 "token.yy.c"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 864 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1581 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     yy_looking_for_trail_begin )
					{
					if ( yy_act == yy_looking_for_trail_begin )
						{
						yy_looking_for_trail_begin = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					yy_looking_for_trail_begin = yy_act & ~YY_TRAILING_MASK;
					yy_looking_for_trail_begin |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					yy_full_match = yy_cp;
					yy_full_state = yy_state_ptr;
					yy_full_lp = yy_lp;
					break;
					}
				++yy_lp;
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 69 "token.flex"
{etok(""); ECHO;}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 70 "token.flex"
{etok("");  printf("\n"); ECHO;}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 71 "token.flex"
{yyterminate();}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "token.flex"
{printf("\n"); yyterminate();}
	YY_BREAK
/* '.': end of abbreviation at eos / eos / not eos */
case 5:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 76 "token.flex"
{ etok(" "); tok(); etok("");}
	YY_BREAK
/*"."                                    {tok();}*/ /* handled by {ns} */
/* Leading punctuation: insert blank after */
case 6:
YY_RULE_SETUP
#line 81 "token.flex"
{tok(); etok(" ");}
	YY_BREAK
/* Rule added for cases where the leading punctuation is not separated from the previous token, i.e.: "word1(word2 word3)"
     {lead}                      {etok(" "); tok(); etok(" ");}*/
case 7:
YY_RULE_SETUP
#line 85 "token.flex"
{tok(); etok(" ");}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 86 "token.flex"
{tok(); etok(" ");}
	YY_BREAK
/* Trailing punctuation: insert blank before, unless ; at end of entity */
case 9:
YY_RULE_SETUP
#line 90 "token.flex"
{tok();}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 91 "token.flex"
{tok();}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 92 "token.flex"
{yyless(0);  BEGIN(trail);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 93 "token.flex"
{yyless(0); BEGIN(trail_new_token);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 94 "token.flex"
{if(!apostrophe){yytext="&raspsquo;"; yyleng=10; etok(); tok();}else{apostrophe=0; etok(""); tok();} etok(); BEGIN(trail_new_token);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 95 "token.flex"
{ etok(" "); tok(); etok(""); BEGIN(trail_new_token);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 96 "token.flex"
{etok(" "); tok(); etok(" "); BEGIN(trail_new_token);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 97 "token.flex"
{ yyless(0); BEGIN(new_token);} /* . does not match \n and EOF */
	YY_BREAK
/* Infixed punctuation */
case 17:
YY_RULE_SETUP
#line 101 "token.flex"
{tok(); etok(" ");}
	YY_BREAK
case 18:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 102 "token.flex"
{tok(); etok(" ");}
	YY_BREAK
/* Contractions, possessives */
case 19:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 106 "token.flex"
{tok(); etok(" ");}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 107 "token.flex"
{tok(); etok(" ");}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 108 "token.flex"
{tok(); etok(" ");}
	YY_BREAK
case 22:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 109 "token.flex"
{tok(); etok("$"); apostrophe=1;}
	YY_BREAK
/* Rules to handle ASCII ' as opening quotation mark */
case 23:
YY_RULE_SETUP
#line 112 "token.flex"
{tok(); etok(" ");}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 113 "token.flex"
{ yytext="&raspsquo;"; yyleng=10; tok(); etok(""); }
	YY_BREAK
/* Inside/outside a token */
case 25:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp = yy_bp + 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 117 "token.flex"
{tok(); etok("");}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 118 "token.flex"
{tok();}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 119 "token.flex"
{etok(""); /*ECHO;*/}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 121 "token.flex"
ECHO;
	YY_BREAK
#line 1569 "token.yy.c"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(new_token):
			case YY_STATE_EOF(out):
			case YY_STATE_EOF(trail):
			case YY_STATE_EOF(trail_new_token):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 864 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 864 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 863);
	if ( ! yy_is_jam )
		*yy_state_ptr++ = yy_current_state;

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 121 "token.flex"


int tok()
{
 /*{printf("(");*/ ECHO; /*printf("|%i)", YY_START);}*/

 BEGIN(INITIAL);
 printedspace = 0;
}

int etok(char *str) /* argument not used any more */
{
 if (!printedspace) {
   printf(/*str*/ " "); /*printf("[%i]", YY_START);*/
   printedspace = 1;
 }
 fflush(stdout);
 BEGIN(new_token);
}

int main(int argc, char **argv) 
{
 buf[0]=0;
 BEGIN(out);
 yylex();
 /*printf("\n");*/

}
